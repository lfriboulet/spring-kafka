/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.lfr.developer.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SensorEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3492705539521664339L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SensorEvent\",\"namespace\":\"io.lfr.developer.models\",\"fields\":[{\"name\":\"serial_number\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"hardware\",\"type\":{\"type\":\"record\",\"name\":\"HardwareConfiguration\",\"fields\":[{\"name\":\"cpu\",\"type\":{\"type\":\"double\",\"scale\":2}},{\"name\":\"memory\",\"type\":\"int\"},{\"name\":\"disk\",\"type\":\"long\"}]}},{\"name\":\"consumption\",\"type\":{\"type\":\"record\",\"name\":\"ConsumptionInformation\",\"fields\":[{\"name\":\"cpu_usage\",\"type\":{\"type\":\"double\",\"scale\":2}},{\"name\":\"memory_usage\",\"type\":{\"type\":\"double\",\"scale\":2}},{\"name\":\"disk_space_used\",\"type\":\"long\"}]}}],\"version\":1}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<SensorEvent> ENCODER =
      new BinaryMessageEncoder<SensorEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SensorEvent> DECODER =
      new BinaryMessageDecoder<SensorEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SensorEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SensorEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SensorEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SensorEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SensorEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SensorEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SensorEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SensorEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence serial_number;
  private java.time.Instant timestamp;
  private io.lfr.developer.models.HardwareConfiguration hardware;
  private io.lfr.developer.models.ConsumptionInformation consumption;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SensorEvent() {}

  /**
   * All-args constructor.
   * @param serial_number The new value for serial_number
   * @param timestamp The new value for timestamp
   * @param hardware The new value for hardware
   * @param consumption The new value for consumption
   */
  public SensorEvent(java.lang.CharSequence serial_number, java.time.Instant timestamp, io.lfr.developer.models.HardwareConfiguration hardware, io.lfr.developer.models.ConsumptionInformation consumption) {
    this.serial_number = serial_number;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.hardware = hardware;
    this.consumption = consumption;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return serial_number;
    case 1: return timestamp;
    case 2: return hardware;
    case 3: return consumption;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: serial_number = (java.lang.CharSequence)value$; break;
    case 1: timestamp = (java.time.Instant)value$; break;
    case 2: hardware = (io.lfr.developer.models.HardwareConfiguration)value$; break;
    case 3: consumption = (io.lfr.developer.models.ConsumptionInformation)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'serial_number' field.
   * @return The value of the 'serial_number' field.
   */
  public java.lang.CharSequence getSerialNumber() {
    return serial_number;
  }


  /**
   * Sets the value of the 'serial_number' field.
   * @param value the value to set.
   */
  public void setSerialNumber(java.lang.CharSequence value) {
    this.serial_number = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'hardware' field.
   * @return The value of the 'hardware' field.
   */
  public io.lfr.developer.models.HardwareConfiguration getHardware() {
    return hardware;
  }


  /**
   * Sets the value of the 'hardware' field.
   * @param value the value to set.
   */
  public void setHardware(io.lfr.developer.models.HardwareConfiguration value) {
    this.hardware = value;
  }

  /**
   * Gets the value of the 'consumption' field.
   * @return The value of the 'consumption' field.
   */
  public io.lfr.developer.models.ConsumptionInformation getConsumption() {
    return consumption;
  }


  /**
   * Sets the value of the 'consumption' field.
   * @param value the value to set.
   */
  public void setConsumption(io.lfr.developer.models.ConsumptionInformation value) {
    this.consumption = value;
  }

  /**
   * Creates a new SensorEvent RecordBuilder.
   * @return A new SensorEvent RecordBuilder
   */
  public static io.lfr.developer.models.SensorEvent.Builder newBuilder() {
    return new io.lfr.developer.models.SensorEvent.Builder();
  }

  /**
   * Creates a new SensorEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SensorEvent RecordBuilder
   */
  public static io.lfr.developer.models.SensorEvent.Builder newBuilder(io.lfr.developer.models.SensorEvent.Builder other) {
    if (other == null) {
      return new io.lfr.developer.models.SensorEvent.Builder();
    } else {
      return new io.lfr.developer.models.SensorEvent.Builder(other);
    }
  }

  /**
   * Creates a new SensorEvent RecordBuilder by copying an existing SensorEvent instance.
   * @param other The existing instance to copy.
   * @return A new SensorEvent RecordBuilder
   */
  public static io.lfr.developer.models.SensorEvent.Builder newBuilder(io.lfr.developer.models.SensorEvent other) {
    if (other == null) {
      return new io.lfr.developer.models.SensorEvent.Builder();
    } else {
      return new io.lfr.developer.models.SensorEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for SensorEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SensorEvent>
    implements org.apache.avro.data.RecordBuilder<SensorEvent> {

    private java.lang.CharSequence serial_number;
    private java.time.Instant timestamp;
    private io.lfr.developer.models.HardwareConfiguration hardware;
    private io.lfr.developer.models.HardwareConfiguration.Builder hardwareBuilder;
    private io.lfr.developer.models.ConsumptionInformation consumption;
    private io.lfr.developer.models.ConsumptionInformation.Builder consumptionBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.lfr.developer.models.SensorEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.serial_number)) {
        this.serial_number = data().deepCopy(fields()[0].schema(), other.serial_number);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.hardware)) {
        this.hardware = data().deepCopy(fields()[2].schema(), other.hardware);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasHardwareBuilder()) {
        this.hardwareBuilder = io.lfr.developer.models.HardwareConfiguration.newBuilder(other.getHardwareBuilder());
      }
      if (isValidValue(fields()[3], other.consumption)) {
        this.consumption = data().deepCopy(fields()[3].schema(), other.consumption);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasConsumptionBuilder()) {
        this.consumptionBuilder = io.lfr.developer.models.ConsumptionInformation.newBuilder(other.getConsumptionBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing SensorEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(io.lfr.developer.models.SensorEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.serial_number)) {
        this.serial_number = data().deepCopy(fields()[0].schema(), other.serial_number);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.hardware)) {
        this.hardware = data().deepCopy(fields()[2].schema(), other.hardware);
        fieldSetFlags()[2] = true;
      }
      this.hardwareBuilder = null;
      if (isValidValue(fields()[3], other.consumption)) {
        this.consumption = data().deepCopy(fields()[3].schema(), other.consumption);
        fieldSetFlags()[3] = true;
      }
      this.consumptionBuilder = null;
    }

    /**
      * Gets the value of the 'serial_number' field.
      * @return The value.
      */
    public java.lang.CharSequence getSerialNumber() {
      return serial_number;
    }


    /**
      * Sets the value of the 'serial_number' field.
      * @param value The value of 'serial_number'.
      * @return This builder.
      */
    public io.lfr.developer.models.SensorEvent.Builder setSerialNumber(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.serial_number = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'serial_number' field has been set.
      * @return True if the 'serial_number' field has been set, false otherwise.
      */
    public boolean hasSerialNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'serial_number' field.
      * @return This builder.
      */
    public io.lfr.developer.models.SensorEvent.Builder clearSerialNumber() {
      serial_number = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public io.lfr.developer.models.SensorEvent.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[1], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public io.lfr.developer.models.SensorEvent.Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'hardware' field.
      * @return The value.
      */
    public io.lfr.developer.models.HardwareConfiguration getHardware() {
      return hardware;
    }


    /**
      * Sets the value of the 'hardware' field.
      * @param value The value of 'hardware'.
      * @return This builder.
      */
    public io.lfr.developer.models.SensorEvent.Builder setHardware(io.lfr.developer.models.HardwareConfiguration value) {
      validate(fields()[2], value);
      this.hardwareBuilder = null;
      this.hardware = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'hardware' field has been set.
      * @return True if the 'hardware' field has been set, false otherwise.
      */
    public boolean hasHardware() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'hardware' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.lfr.developer.models.HardwareConfiguration.Builder getHardwareBuilder() {
      if (hardwareBuilder == null) {
        if (hasHardware()) {
          setHardwareBuilder(io.lfr.developer.models.HardwareConfiguration.newBuilder(hardware));
        } else {
          setHardwareBuilder(io.lfr.developer.models.HardwareConfiguration.newBuilder());
        }
      }
      return hardwareBuilder;
    }

    /**
     * Sets the Builder instance for the 'hardware' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.lfr.developer.models.SensorEvent.Builder setHardwareBuilder(io.lfr.developer.models.HardwareConfiguration.Builder value) {
      clearHardware();
      hardwareBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'hardware' field has an active Builder instance
     * @return True if the 'hardware' field has an active Builder instance
     */
    public boolean hasHardwareBuilder() {
      return hardwareBuilder != null;
    }

    /**
      * Clears the value of the 'hardware' field.
      * @return This builder.
      */
    public io.lfr.developer.models.SensorEvent.Builder clearHardware() {
      hardware = null;
      hardwareBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'consumption' field.
      * @return The value.
      */
    public io.lfr.developer.models.ConsumptionInformation getConsumption() {
      return consumption;
    }


    /**
      * Sets the value of the 'consumption' field.
      * @param value The value of 'consumption'.
      * @return This builder.
      */
    public io.lfr.developer.models.SensorEvent.Builder setConsumption(io.lfr.developer.models.ConsumptionInformation value) {
      validate(fields()[3], value);
      this.consumptionBuilder = null;
      this.consumption = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'consumption' field has been set.
      * @return True if the 'consumption' field has been set, false otherwise.
      */
    public boolean hasConsumption() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'consumption' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.lfr.developer.models.ConsumptionInformation.Builder getConsumptionBuilder() {
      if (consumptionBuilder == null) {
        if (hasConsumption()) {
          setConsumptionBuilder(io.lfr.developer.models.ConsumptionInformation.newBuilder(consumption));
        } else {
          setConsumptionBuilder(io.lfr.developer.models.ConsumptionInformation.newBuilder());
        }
      }
      return consumptionBuilder;
    }

    /**
     * Sets the Builder instance for the 'consumption' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.lfr.developer.models.SensorEvent.Builder setConsumptionBuilder(io.lfr.developer.models.ConsumptionInformation.Builder value) {
      clearConsumption();
      consumptionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'consumption' field has an active Builder instance
     * @return True if the 'consumption' field has an active Builder instance
     */
    public boolean hasConsumptionBuilder() {
      return consumptionBuilder != null;
    }

    /**
      * Clears the value of the 'consumption' field.
      * @return This builder.
      */
    public io.lfr.developer.models.SensorEvent.Builder clearConsumption() {
      consumption = null;
      consumptionBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SensorEvent build() {
      try {
        SensorEvent record = new SensorEvent();
        record.serial_number = fieldSetFlags()[0] ? this.serial_number : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.time.Instant) defaultValue(fields()[1]);
        if (hardwareBuilder != null) {
          try {
            record.hardware = this.hardwareBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("hardware"));
            throw e;
          }
        } else {
          record.hardware = fieldSetFlags()[2] ? this.hardware : (io.lfr.developer.models.HardwareConfiguration) defaultValue(fields()[2]);
        }
        if (consumptionBuilder != null) {
          try {
            record.consumption = this.consumptionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("consumption"));
            throw e;
          }
        } else {
          record.consumption = fieldSetFlags()[3] ? this.consumption : (io.lfr.developer.models.ConsumptionInformation) defaultValue(fields()[3]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SensorEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<SensorEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SensorEvent>
    READER$ = (org.apache.avro.io.DatumReader<SensorEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










