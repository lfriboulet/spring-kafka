/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.lfr.developer.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ConsumptionInformation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8227316901571003360L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ConsumptionInformation\",\"namespace\":\"io.lfr.developer.models\",\"fields\":[{\"name\":\"cpu_usage\",\"type\":{\"type\":\"double\",\"scale\":2}},{\"name\":\"memory_usage\",\"type\":{\"type\":\"double\",\"scale\":2}},{\"name\":\"disk_space_used\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ConsumptionInformation> ENCODER =
      new BinaryMessageEncoder<ConsumptionInformation>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ConsumptionInformation> DECODER =
      new BinaryMessageDecoder<ConsumptionInformation>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ConsumptionInformation> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ConsumptionInformation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ConsumptionInformation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ConsumptionInformation>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ConsumptionInformation to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ConsumptionInformation from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ConsumptionInformation instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ConsumptionInformation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private double cpu_usage;
  private double memory_usage;
  private long disk_space_used;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ConsumptionInformation() {}

  /**
   * All-args constructor.
   * @param cpu_usage The new value for cpu_usage
   * @param memory_usage The new value for memory_usage
   * @param disk_space_used The new value for disk_space_used
   */
  public ConsumptionInformation(java.lang.Double cpu_usage, java.lang.Double memory_usage, java.lang.Long disk_space_used) {
    this.cpu_usage = cpu_usage;
    this.memory_usage = memory_usage;
    this.disk_space_used = disk_space_used;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cpu_usage;
    case 1: return memory_usage;
    case 2: return disk_space_used;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cpu_usage = (java.lang.Double)value$; break;
    case 1: memory_usage = (java.lang.Double)value$; break;
    case 2: disk_space_used = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'cpu_usage' field.
   * @return The value of the 'cpu_usage' field.
   */
  public double getCpuUsage() {
    return cpu_usage;
  }


  /**
   * Sets the value of the 'cpu_usage' field.
   * @param value the value to set.
   */
  public void setCpuUsage(double value) {
    this.cpu_usage = value;
  }

  /**
   * Gets the value of the 'memory_usage' field.
   * @return The value of the 'memory_usage' field.
   */
  public double getMemoryUsage() {
    return memory_usage;
  }


  /**
   * Sets the value of the 'memory_usage' field.
   * @param value the value to set.
   */
  public void setMemoryUsage(double value) {
    this.memory_usage = value;
  }

  /**
   * Gets the value of the 'disk_space_used' field.
   * @return The value of the 'disk_space_used' field.
   */
  public long getDiskSpaceUsed() {
    return disk_space_used;
  }


  /**
   * Sets the value of the 'disk_space_used' field.
   * @param value the value to set.
   */
  public void setDiskSpaceUsed(long value) {
    this.disk_space_used = value;
  }

  /**
   * Creates a new ConsumptionInformation RecordBuilder.
   * @return A new ConsumptionInformation RecordBuilder
   */
  public static io.lfr.developer.models.ConsumptionInformation.Builder newBuilder() {
    return new io.lfr.developer.models.ConsumptionInformation.Builder();
  }

  /**
   * Creates a new ConsumptionInformation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ConsumptionInformation RecordBuilder
   */
  public static io.lfr.developer.models.ConsumptionInformation.Builder newBuilder(io.lfr.developer.models.ConsumptionInformation.Builder other) {
    if (other == null) {
      return new io.lfr.developer.models.ConsumptionInformation.Builder();
    } else {
      return new io.lfr.developer.models.ConsumptionInformation.Builder(other);
    }
  }

  /**
   * Creates a new ConsumptionInformation RecordBuilder by copying an existing ConsumptionInformation instance.
   * @param other The existing instance to copy.
   * @return A new ConsumptionInformation RecordBuilder
   */
  public static io.lfr.developer.models.ConsumptionInformation.Builder newBuilder(io.lfr.developer.models.ConsumptionInformation other) {
    if (other == null) {
      return new io.lfr.developer.models.ConsumptionInformation.Builder();
    } else {
      return new io.lfr.developer.models.ConsumptionInformation.Builder(other);
    }
  }

  /**
   * RecordBuilder for ConsumptionInformation instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ConsumptionInformation>
    implements org.apache.avro.data.RecordBuilder<ConsumptionInformation> {

    private double cpu_usage;
    private double memory_usage;
    private long disk_space_used;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.lfr.developer.models.ConsumptionInformation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cpu_usage)) {
        this.cpu_usage = data().deepCopy(fields()[0].schema(), other.cpu_usage);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.memory_usage)) {
        this.memory_usage = data().deepCopy(fields()[1].schema(), other.memory_usage);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.disk_space_used)) {
        this.disk_space_used = data().deepCopy(fields()[2].schema(), other.disk_space_used);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing ConsumptionInformation instance
     * @param other The existing instance to copy.
     */
    private Builder(io.lfr.developer.models.ConsumptionInformation other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.cpu_usage)) {
        this.cpu_usage = data().deepCopy(fields()[0].schema(), other.cpu_usage);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.memory_usage)) {
        this.memory_usage = data().deepCopy(fields()[1].schema(), other.memory_usage);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.disk_space_used)) {
        this.disk_space_used = data().deepCopy(fields()[2].schema(), other.disk_space_used);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'cpu_usage' field.
      * @return The value.
      */
    public double getCpuUsage() {
      return cpu_usage;
    }


    /**
      * Sets the value of the 'cpu_usage' field.
      * @param value The value of 'cpu_usage'.
      * @return This builder.
      */
    public io.lfr.developer.models.ConsumptionInformation.Builder setCpuUsage(double value) {
      validate(fields()[0], value);
      this.cpu_usage = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'cpu_usage' field has been set.
      * @return True if the 'cpu_usage' field has been set, false otherwise.
      */
    public boolean hasCpuUsage() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'cpu_usage' field.
      * @return This builder.
      */
    public io.lfr.developer.models.ConsumptionInformation.Builder clearCpuUsage() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'memory_usage' field.
      * @return The value.
      */
    public double getMemoryUsage() {
      return memory_usage;
    }


    /**
      * Sets the value of the 'memory_usage' field.
      * @param value The value of 'memory_usage'.
      * @return This builder.
      */
    public io.lfr.developer.models.ConsumptionInformation.Builder setMemoryUsage(double value) {
      validate(fields()[1], value);
      this.memory_usage = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'memory_usage' field has been set.
      * @return True if the 'memory_usage' field has been set, false otherwise.
      */
    public boolean hasMemoryUsage() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'memory_usage' field.
      * @return This builder.
      */
    public io.lfr.developer.models.ConsumptionInformation.Builder clearMemoryUsage() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'disk_space_used' field.
      * @return The value.
      */
    public long getDiskSpaceUsed() {
      return disk_space_used;
    }


    /**
      * Sets the value of the 'disk_space_used' field.
      * @param value The value of 'disk_space_used'.
      * @return This builder.
      */
    public io.lfr.developer.models.ConsumptionInformation.Builder setDiskSpaceUsed(long value) {
      validate(fields()[2], value);
      this.disk_space_used = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'disk_space_used' field has been set.
      * @return True if the 'disk_space_used' field has been set, false otherwise.
      */
    public boolean hasDiskSpaceUsed() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'disk_space_used' field.
      * @return This builder.
      */
    public io.lfr.developer.models.ConsumptionInformation.Builder clearDiskSpaceUsed() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ConsumptionInformation build() {
      try {
        ConsumptionInformation record = new ConsumptionInformation();
        record.cpu_usage = fieldSetFlags()[0] ? this.cpu_usage : (java.lang.Double) defaultValue(fields()[0]);
        record.memory_usage = fieldSetFlags()[1] ? this.memory_usage : (java.lang.Double) defaultValue(fields()[1]);
        record.disk_space_used = fieldSetFlags()[2] ? this.disk_space_used : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ConsumptionInformation>
    WRITER$ = (org.apache.avro.io.DatumWriter<ConsumptionInformation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ConsumptionInformation>
    READER$ = (org.apache.avro.io.DatumReader<ConsumptionInformation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeDouble(this.cpu_usage);

    out.writeDouble(this.memory_usage);

    out.writeLong(this.disk_space_used);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.cpu_usage = in.readDouble();

      this.memory_usage = in.readDouble();

      this.disk_space_used = in.readLong();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.cpu_usage = in.readDouble();
          break;

        case 1:
          this.memory_usage = in.readDouble();
          break;

        case 2:
          this.disk_space_used = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










